import { Suspense } from "react";
import { api } from "@/trpc/server";
import OpportunitiesClient from "../_components/Opportunities/OpportunitiesClient";
import LoadingComponent from "../_components/LoadingComponent";
import type { Metadata } from "next";
import Link from "next/link";

// Static metadata will be generated by the generateMetadata function

// Generate dynamic metadata for all pages - updated to use Promise for searchParams
export async function generateMetadata({
  searchParams,
}: {
  searchParams: Promise<{ page?: string }>;
}): Promise<Metadata> {
  const resolvedSearchParams = await searchParams;
  const page = parseInt(resolvedSearchParams.page ?? "1") || 1;

  // Base metadata that applies to all pages
  const baseMetadata: Metadata = {
    title: "Explore All Opportunities | Find Your Next Passion Project",
    description:
      "Browse and discover a wide range of opportunities tailored to your interests. Filter by type, location, and more to find your perfect match.",
    keywords: "opportunities, projects, activities, discover, browse, filter",
    openGraph: {
      title: "Explore All Opportunities | Find Your Next Passion Project",
      description:
        "Browse and discover a wide range of opportunities tailored to your interests. Filter by type, location, and more to find your perfect match.",
      type: "website",
      images: [
        {
          url: "https://images.ctfassets.net/ayry21z1dzn2/lToBBbbBZaSz1i4NtT4Yp/befa24256b49c1c5540a818b984ecc48/Frame_230__1_.png?h=250",
          width: 1200,
          height: 630,
          alt: "Opportunities illustration",
        },
      ],
    },
    twitter: {
      images: [
        {
          url: "https://images.ctfassets.net/ayry21z1dzn2/lToBBbbBZaSz1i4NtT4Yp/befa24256b49c1c5540a818b984ecc48/Frame_230__1_.png?h=250",
          width: 1200,
          height: 630,
          alt: "Opportunities illustration",
        },
      ],
      card: "summary_large_image",
      title: "Explore All Opportunities | Find Your Next Passion Project",
      description:
        "Browse and discover a wide range of opportunities tailored to your interests. Filter by type, location, and more to find your perfect match.",
    },
  };

  // For pages beyond the first, customize the title and add pagination metadata
  if (page > 1) {
    return {
      ...baseMetadata,
      title: `Explore Opportunities - Page ${page} | Find Your Next Passion Project`,
      robots: {
        index: true,
        follow: true,
      },
      alternates: {
        canonical:
          page === 1 ? "/opportunities" : `/opportunities?page=${page}`,
      },
    };
  }

  // Return base metadata for page 1
  return baseMetadata;
}

// Updated component to use Promise for searchParams
const OpportunitiesPage = async ({
  searchParams,
}: {
  searchParams: Promise<{ page?: string }>;
}) => {
  // Resolve the Promise to get the actual searchParams
  const resolvedSearchParams = await searchParams;

  // Parse page from search params with fallback to 1
  const page = parseInt(resolvedSearchParams.page ?? "1") || 1;
  const limit = 12;

  // Server-side data fetching
  const [oppsData, types, zones] = await Promise.all([
    api.opp.getAllOpportunitiesWithZonesLimit({ limit, page }),
    api.type.getAllTypes(),
    api.zone.getAllZones(),
  ]);

  const { opps = [], totalOpps = 0 } = oppsData;

  // Calculate total pages for structured data
  const totalPages = Math.ceil(totalOpps / limit);
  if (page < totalPages) {
    api.opp
      .getAllOpportunitiesWithZonesLimit({ limit, page: page + 1 })
      .then(() => console.debug(`Prefetched page ${page + 1}`))
      .catch(console.error);
  }
  // JSON-LD for collection page
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    name: "CORDY | View All Opportunities",
    description:
      "Browse and discover a wide range of opportunities tailored to your interests.",
    url: `${process.env.NEXT_PUBLIC_SITE_URL}/opportunities${page > 1 ? `?page=${page}` : ""}`,
    numberOfItems: totalOpps,
    itemListElement: opps.map((opp, index) => ({
      "@type": "ListItem",
      position: (page - 1) * limit + index + 1,
      item: {
        "@type": "Event",
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        name: "name" in opp ? opp.name : "Opportunity Event",
        url:
          "id" in opp
            ? `${process.env.NEXT_PUBLIC_SITE_URL}/opportunities/${opp.id}`
            : "",
      },
    })),
  };

  return (
    <main className="flex min-h-screen flex-col items-center py-12">
      <Suspense fallback={<LoadingComponent />}>
        <OpportunitiesClient
          initialOpps={opps}
          totalOpps={totalOpps}
          initialPage={page}
          limit={limit}
          zones={zones}
          types={types}
        />
      </Suspense>

      {/* Pagination links for SEO (hidden visually but accessible to crawlers) */}
      <div className="sr-only">
        {page > 1 && (
          <Link href={`/opportunities?page=${page - 1}`} rel="prev">
            Previous Page
          </Link>
        )}
        {page < totalPages && (
          <Link href={`/opportunities?page=${page + 1}`} rel="next">
            Next Page
          </Link>
        )}
        {page > 1 && (
          <Link href="/opportunities" rel="first">
            First Page
          </Link>
        )}
        {page < totalPages && (
          <Link href={`/opportunities?page=${totalPages}`} rel="last">
            Last Page
          </Link>
        )}
      </div>

      {/* Add structured data */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(jsonLd),
        }}
      />
    </main>
  );
};

export default OpportunitiesPage;
